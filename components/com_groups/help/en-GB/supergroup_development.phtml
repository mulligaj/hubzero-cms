<?php
/**
 * HUBzero CMS
 *
 * Copyright 2005-2011 Purdue University. All rights reserved.
 *
 * This file is part of: The HUBzero(R) Platform for Scientific Collaboration
 *
 * The HUBzero(R) Platform for Scientific Collaboration (HUBzero) is free
 * software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * HUBzero is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * HUBzero is a registered trademark of Purdue University.
 *
 * @package   hubzero-cms
 * @author    Christopher Smoak <csmoak@purdue.edu>
 * @copyright Copyright 2005-2011 Purdue University. All rights reserved.
 * @license   http://www.gnu.org/licenses/lgpl-3.0.html LGPLv3
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die('Restricted access');
?>
<h1>Super Group Development</h1>

<h4>Table of Contents</h4>
<ul>
	<li>
		<a href="#overview">Overview</a>
		<ul>
			<li><a href="#whatisgitlab">What is Gitlab?</a></li>
			<li><a href="#whygithub">Why Gitlab?</a></li>
		</ul>
	</li>
	<li>
		<a href="#setup">Setup</a>
		<ul>
			<?php if (JFactory::getUser()->get('usertype') == 'Super Administrator') : ?>
				<li><a href="#hub_setup">Hub</a></li>
			<?php endif; ?>
			<li><a href="#group_setup">Group</a></li>
			<li><a href="#developer_setup">Developer</a></li>
		</ul>
	</li>
	<li>
		<a href="#developing">Developing</a>
		<ul>
			<li><a href="#fork_project">Fork Project</a></li>
			<li><a href="#clone_repository">Clone Repository</a></li>
			<li><a href="#add_upstream">Add Upstream Repository</a></li>
			<li><a href="#develop">Develop</a></li>
			<li><a href="#sync_upstream">Sync with Main Project</a></li>
			<li><a href="#push_changes">Push Changes</a></li>
			<li><a href="#create_merge_request">Create Merge Request</a></li>
			<li><a href="#approval">Wait for Approval</a></li>
			<li><a href="#pull_changes">Pull Changes</a></li>
		</ul>
	</li>
</ul>

<hr />

<h3 id="whatisgitlab">What is Gitlab?</h3>
<p>In efforts to make super group development easier, we are utilizing a code management tool called <a href="https://www.gitlab.com/" target="_blank">Gitlab</a>. Similar to <a href="https://www.github.com/" target="_blank">Github</a> in functionality and looks, it provides an easy way for the developers to write &amp; push code and give the HUBzero team the security we needed to allow third party developers to commit code to production machines.</p>

<hr />

<h3 id="whygithub">Why Gitlab?</h3>
<p>There are many benefits for both parties (the developer &amp; the Hub team) to using a tool like Gitlab for managing the code of a super group.</p>

<h6>Security</h6>
<p>Live site access can be very dangerous for even a very experienced developer. The use of Gitlab removes the need to access the live site all together. The developer can code and test in whatever environement they want, add their changes and the hub can pull in the approved changes right through the HUB admin interface.</p>

<p>Gitlab also allows the HUB team to monitor and approve code after the developer has pushed their updates. Changes MUST be approved by the HUB team before they can be moved to the live site.</p>

<hr />

<h6>Developer Freedom</h6>
<p>Developers will actually work on whats called a "forked" copy of the super group repository. This means they they are working on their very own version of the super group code and can do whatever they want to it without affecting the live site super group or any other developers also working on the super group.</p>

<hr />

<h6>Frequent Updates</h6>
<p>Managing the super groups by Gitlab (outside of the main CMS), allows for more regular updates. At any point after the hub is configured to work with Gitlab, any hub admin who has access to the groups adminstrator panel can update the the super groups code.</p>

<hr />

<h6>Extra Features</h6>
<p>Along with a nice code browser/editor, Gitlab comes with an Issue tracker and Wiki section for each project. Each project has the ability to use those sections however these please.</p>

<hr />

<a id="setup"></a>

<?php if (JFactory::getUser()->get('usertype') == 'Super Administrator') : ?>
	<h3 id="hub_setup">Hub Setup</h3>
	<p>Each HUB can choose to integrate with Gitlab or not. If your HUB chooses to integrate then there are few steps to get setup and running.</p>
	<ol>
		<li>Gitlab integration must be enabled in the Groups config, under the "super" tab. The Gitlab API URL must also be supplied along with the API key of an admin account on Gitlab (found under the "account" tab in profile section in Gitlab). This allows the HUB to do the initial group/project/repository creation when the super group is created.</li>
		<li>In order for the HUB (www-data user) to make the first commit to the project, including the basic super group template and folder structure, the www-data user must have an SSH Key on the HUB machine. That SSH key must also be added to an admin account on Gitlab. This first commit actually creates the GIT repository in Gitlab.</li>
		<li>The last step for HUB setup is to SSH as the www-data user to the Gitlab machine from the HUB machine.. This will approve the RSA fingerprint of the Gitlab machine for the www-data user and add the machine to the known_hosts file. If this step is omitted the hubs attempt to make the inital commit will be denied.</li>
	</ol>
	<hr />
<?php endif; ?> 

<h3 id="group_setup">Group Setup</h3>
<p>When a super group is created on the HUB, most of the initial setup for that super group is done automatically. If you are working on a super group that was created prior to May 2014, then this setup will need to be done manually for that super group to work with Gitlab. Please enter a ticket through the support system detailing the the super group and that you would like to have your group integrated into Gitlab.</p>

<hr />

<h3 id="developer_setup">Developer Setup</h3>

<h6>Access</h6>
<p>Part of the developer setup is getting permission to access Gitlab. This must be done manually by the HUBzero development team. Please submit a ticket indicating the super group and any users (name, preferred username, &amp; email address) that will need to have access in Gitlab for the project.</p>

<hr />

<h6>Login &amp; Password Change</h6>
<p>Once you have submitted a ticket for access to Gitlab, you will recieve an email within 48 hours with all the details you need to login to your account. The email will contain a temporary password that you will be forced to update upon login. After you login and change your password you can move on to the next step, uploading an SSH key.</p>

<hr />

<h6>SSH Keys</h6>
<p>In order to make commits and push to Gitlab, you need to add an SSH key to your account. To add an SSH key, login to Gitlab, go to your profile, then SSH Keys. Click the "Add SSH Key" button, enter any title you want, paste your public SSH key in the box, and click "Add Key". If you are unsure of how to create an SSH key there is a link at the top of the "Add an SSH Key" page that links to a help page with detailed instructions.</p>

<p class="info">Note: You can add multiple SSH keys if you plan to make commits from multiple machines.</p>

<hr />

<h2 id="developing">Developing</h2>

<p>After you have completed all the necessary setup steps its time to start actually developing. The following items are necessary steps to getting your code added to the live site super group code as easily as possible.</p>
<!-- <p>If your familiar with the "fork &amp; merge" workflow on Github, then the super group integration with Gitlab will be easy. Basically the "fork &amp; merge" workflow means that instead of everyone modifiying and committing to a single repository, each user "forks" the super group project, creating their own version of the project. That user can then clone the repository to wherever they want (dev machine, local machine, etc) and then make the necessary changes. When they are ready to move their changes to the super group on the live site, they make local commits and push to their "forked" project. Then through the Gitlab web interface they make a "merge request", including any of the changes they want brought over. This will alert the HUBzero developement team to merge the requested changes.</p> -->

<hr />

<p class="info">For example purposes we are going to use "mytestgroup" as the group cname and "hubzero.org" as the hub we are working on. This would map to "hubzero" as the group name and "mytestgroup" as the project in Gitlab.
 We are also going to use "theuser" as the user's username in Gitlab.</p>

<h6 id="fork_project">Fork Project</h6>
<p>The first step is you need to create a fork of the main project. You can find main project by navigating to your dashboard in Gitlab then the projects tab. Project names are formatted by the group/project, where group is the hub name/URL and project is super group cname.</p>

<ol>
	<li>Click on the project you want to start development for, you should be taken to the project page.</li>
	<li>Click the "Fork repository" button on the right side of the page. This will fork the repository and take you to your forked version of this repository.</li>
</ol>

<hr />

<h6 id="clone_repository">Clone Repository</h6>
<p>You are now ready to clone the repository to a development machine. This can be anywhere, but recommended that you use the hubs dev machine or local dev machine (local HUB on VM).</p>

<ol>
	<li>Get the repository url. From your forked repository page you should see a text box with the git repo url in it. Copy that URL to your clipboard</li>
	<li>
		Go to the machine where you want to clone the repository to and type the following into a terminal window:
		<pre>git clone git@gitlab.hubzero.org:theuser/mytestgroup.git; mv mytestgroup/* mytestgroup/.git* .; rmdir mytestgroup;</pre>
	</li>
	<li>The repository content will be copied to a "mytestgroup" directory within the current directory</li>
</ol>

<hr />

<h6 id="add_upstream">Add Upstream Repository</h6>
<p>Upstream repository is a fancy word for the main repository you forked from. You need to tell your forked copy that it has a main repository and where it is. To add the upstream repository, in a Terminal window navigate to your cloned repo and type the following:
	<pre>git remote add upstream git@gitlab.hubzero.org:hubzero/mytestgroup.git</pre>
</p>

<p>
	You can test to see if everything was added correctly by typing:
	<pre>git remote -v</pre>
	and you should now see something like:
	<pre>
origin    git@gitlab.hubzero.org:testuser/mytestgroup.git (fetch)
origin    git@gitlab.hubzero.org:testuser/mytestgroup.git (push)
upstream  git@gitlab.hubzero.org:hubzero/mytestgroup.git (fetch)
upstream  git@gitlab.hubzero.org:hubzero/mytestgroup.git (push)</pre>
</p>
<p class="warning">This is a very important part of working with Gitlab is keeping your forked repository synced with the main repository.</p>
<p>
<hr />

<h6 id="develop">Develop</h6>
<p>Make changes, add new code, fix bugs etc. Commit as you develop.</p> 

<hr />

<h6 id="sync_upstream">Sync with Main Project</h6>
<p>Before you push your changes to Gitlab it is recommended that you sync your forked project with the main project.</p>
<p class="warning">Failure to sync your fork before pushing changes and creating a merge request can result in your merge request being denied until synced properly.</p>
<p>
	To sync, navigate to your cloned repo in a terminal window and type the following:
	<pre>git fetch upstream</pre>
	Then make sure your on the master branch by typing:
	<pre>git checkout master</pre>
	Then merge the upstream master branch with your master branch by:
	<pre>git merge upstream/master</pre>
	You might have to resolve some merge conflicts at this point. See the Git documation or search Google for issues you might run into.
</p>

<p class="info">Note: You can sync your forked project with the main project as often as you like. Syncing often usually reduces potential merge conflicts.</p>
<hr />

<h6 id="push_changes">Push Changes</h6>
<p>
	Pushing your changes it simple and easy. Simple type the following in a terminal window from within your cloned repo:
	<pre>git push origin master</pre>
	This pushes the changes you've committed to your forked projects repository.
</p>

<hr />

<h6 id="create_merge_request">Create Merge Request</h6>
<p>A merge request is how the changes you pushed to your forked project get into the main project. Login to gitlab, go to your forked project, click the merge tab, then "New merge request". Select the master branch in your forked copy and click "Compare branches". You should be taken to the next step where you can give the merge request a title and a description. The description is very important for the approval team to understand what the merge is related to. This page will also show the commits that will be merged and the file diffs. When your ready click "Submit merge request".</p>

<hr />

<h6 id="approval">Wait for Approval</h6>
<p>Approval takes anywhere between 24-48 hours depending on complexity and schedules. Approvals are done Monday-Friday 8am - 5pm EST.</p>
<p>When your merge request is accepted or denied you will get an email notice regarding its status.</p>

<hr />

<h6 id="pull_changes">Pull Changes</h6>
<p>Pulling in the changes that were merged into the main project can be done through the admin interface for the HUB. You must have admin rights to access the administrator interface.</p>